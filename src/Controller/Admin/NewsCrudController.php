<?php

namespace App\Controller\Admin;

use App\Entity\News;
use EasyCorp\Bundle\EasyAdminBundle\Config\Action;
use EasyCorp\Bundle\EasyAdminBundle\Config\Actions;
use EasyCorp\Bundle\EasyAdminBundle\Config\Crud;
use EasyCorp\Bundle\EasyAdminBundle\Context\AdminContext;
use EasyCorp\Bundle\EasyAdminBundle\Controller\AbstractCrudController;
use EasyCorp\Bundle\EasyAdminBundle\Field\IdField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextEditorField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextField;
use http\Env\Request;
use Psr\Log\LoggerInterface;
use Symfony\Component\DomCrawler\Crawler;
use Symfony\Component\HttpClient\HttpClient;

class NewsCrudController extends AbstractCrudController
{
    private $logger;

    public static function getEntityFqcn(): string
    {
        return News::class;
    }

    public function __construct(LoggerInterface $logger)
    {
        $this->logger = $logger;
    }

    public function configureActions(Actions $actions): Actions
    {

        $actions->add(
            Crud::PAGE_INDEX,
            Action::new('update', 'Update', 'fa fa-download')
                ->linkToCrudAction('updateNews')
                ->createAsGlobalAction()
        );

        return parent::configureActions($actions); // TODO: Change the autogenerated stub
    }

    public function configureFields(string $pageName): iterable
    {
        return [
            IdField::new('id'),
            TextField::new('title'),
            TextEditorField::new('description'),
        ];
    }

    public function updateNews(AdminContext $context)
    {
        $em = $this->getDoctrine()->getManager();

        $client = HttpClient::create();

        $response = $client->request('GET', 'http://static.feed.rbc.ru/rbc/logical/footer/news.rss');

        $request = \Symfony\Component\HttpFoundation\Request::createFromGlobals();

        $crawler = new Crawler();
        $crawler->addXmlContent($response->getContent());

        $news = $crawler->filterXPath('//rss/channel/item');

        foreach ($news as $item) {
            $domElement = new Crawler($item);

            $news = new News;

            if ($domElement->filter('link')->count()) {
                $element = $this->getDoctrine()->getManager()->getRepository(News::class)->findBy(['link' => $domElement->filter('link')->text()]);
            } else {
                continue;
            }

            if (!$element) {
                try {
                    if ($domElement->filter('title')->count()) {
                        $news->setTitle($domElement->filter('title')->text());
                    }

                    if ($domElement->filter('title')->count()) {
                        $news->setDescription($domElement->filter('description')->text());
                    }

                    if ($domElement->filter('link')->count()) {
                        $news->setLink($domElement->filter('link')->text());
                    }


                    if ($domElement->filter('author')->count()) {
                        $news->setAuthor($domElement->filter('author')->text());
                    }

                    if ($domElement->filter('pubDate')->count()) {
                        $pubDate = new \DateTime($domElement->filter('pubDate')->text());
                        $news->setPubDate($pubDate);
                    } else {
                        $pubDate = new \DateTime('now');
                        $news->setPubDate($pubDate);
                    }

                    if ($domElement->filter('enclosure')->count()) {
                        $news->setImage($domElement->filter('enclosure')->attr('url'));
                    }

                    $em->persist($news);
                    $em->flush($news);
                } catch (\Exception $e) {
                    $this->logger->critical('News updated cancel', [
                        'requestedMethod' => $request->getMethod(),
                        'requestUrl' => $request->getRequestUri(),
                        'responseCode' => $e->getCode(),
                        'responseBody' => $e->getMessage(),
                    ]);
                }
            }
        }

        $this->addFlash('success', 'News updated!');

        $this->logger->info('News updated', [
            'requestedMethod' => $request->getMethod(),
            'requestUrl' => $request->getRequestUri(),
            'responseCode' => $response->getStatusCode(),
            'responseBody' => $response->getContent(),
        ]);

        return $this->redirect($context->getReferrer());
    }
}
